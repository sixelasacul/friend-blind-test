/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LobbyIdRouteImport } from './routes/$lobbyId/route'
import { Route as IndexImport } from './routes/index'
import { Route as LobbyIdWaitingImport } from './routes/$lobbyId/waiting'
import { Route as LobbyIdPlayingImport } from './routes/$lobbyId/playing'
import { Route as LobbyIdFinishedImport } from './routes/$lobbyId/finished'

// Create/Update Routes

const LobbyIdRouteRoute = LobbyIdRouteImport.update({
  id: '/$lobbyId',
  path: '/$lobbyId',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const LobbyIdWaitingRoute = LobbyIdWaitingImport.update({
  id: '/waiting',
  path: '/waiting',
  getParentRoute: () => LobbyIdRouteRoute,
} as any)

const LobbyIdPlayingRoute = LobbyIdPlayingImport.update({
  id: '/playing',
  path: '/playing',
  getParentRoute: () => LobbyIdRouteRoute,
} as any)

const LobbyIdFinishedRoute = LobbyIdFinishedImport.update({
  id: '/finished',
  path: '/finished',
  getParentRoute: () => LobbyIdRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$lobbyId': {
      id: '/$lobbyId'
      path: '/$lobbyId'
      fullPath: '/$lobbyId'
      preLoaderRoute: typeof LobbyIdRouteImport
      parentRoute: typeof rootRoute
    }
    '/$lobbyId/finished': {
      id: '/$lobbyId/finished'
      path: '/finished'
      fullPath: '/$lobbyId/finished'
      preLoaderRoute: typeof LobbyIdFinishedImport
      parentRoute: typeof LobbyIdRouteImport
    }
    '/$lobbyId/playing': {
      id: '/$lobbyId/playing'
      path: '/playing'
      fullPath: '/$lobbyId/playing'
      preLoaderRoute: typeof LobbyIdPlayingImport
      parentRoute: typeof LobbyIdRouteImport
    }
    '/$lobbyId/waiting': {
      id: '/$lobbyId/waiting'
      path: '/waiting'
      fullPath: '/$lobbyId/waiting'
      preLoaderRoute: typeof LobbyIdWaitingImport
      parentRoute: typeof LobbyIdRouteImport
    }
  }
}

// Create and export the route tree

interface LobbyIdRouteRouteChildren {
  LobbyIdFinishedRoute: typeof LobbyIdFinishedRoute
  LobbyIdPlayingRoute: typeof LobbyIdPlayingRoute
  LobbyIdWaitingRoute: typeof LobbyIdWaitingRoute
}

const LobbyIdRouteRouteChildren: LobbyIdRouteRouteChildren = {
  LobbyIdFinishedRoute: LobbyIdFinishedRoute,
  LobbyIdPlayingRoute: LobbyIdPlayingRoute,
  LobbyIdWaitingRoute: LobbyIdWaitingRoute,
}

const LobbyIdRouteRouteWithChildren = LobbyIdRouteRoute._addFileChildren(
  LobbyIdRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$lobbyId': typeof LobbyIdRouteRouteWithChildren
  '/$lobbyId/finished': typeof LobbyIdFinishedRoute
  '/$lobbyId/playing': typeof LobbyIdPlayingRoute
  '/$lobbyId/waiting': typeof LobbyIdWaitingRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$lobbyId': typeof LobbyIdRouteRouteWithChildren
  '/$lobbyId/finished': typeof LobbyIdFinishedRoute
  '/$lobbyId/playing': typeof LobbyIdPlayingRoute
  '/$lobbyId/waiting': typeof LobbyIdWaitingRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$lobbyId': typeof LobbyIdRouteRouteWithChildren
  '/$lobbyId/finished': typeof LobbyIdFinishedRoute
  '/$lobbyId/playing': typeof LobbyIdPlayingRoute
  '/$lobbyId/waiting': typeof LobbyIdWaitingRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$lobbyId'
    | '/$lobbyId/finished'
    | '/$lobbyId/playing'
    | '/$lobbyId/waiting'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$lobbyId'
    | '/$lobbyId/finished'
    | '/$lobbyId/playing'
    | '/$lobbyId/waiting'
  id:
    | '__root__'
    | '/'
    | '/$lobbyId'
    | '/$lobbyId/finished'
    | '/$lobbyId/playing'
    | '/$lobbyId/waiting'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LobbyIdRouteRoute: typeof LobbyIdRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LobbyIdRouteRoute: LobbyIdRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$lobbyId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$lobbyId": {
      "filePath": "$lobbyId/route.tsx",
      "children": [
        "/$lobbyId/finished",
        "/$lobbyId/playing",
        "/$lobbyId/waiting"
      ]
    },
    "/$lobbyId/finished": {
      "filePath": "$lobbyId/finished.tsx",
      "parent": "/$lobbyId"
    },
    "/$lobbyId/playing": {
      "filePath": "$lobbyId/playing.tsx",
      "parent": "/$lobbyId"
    },
    "/$lobbyId/waiting": {
      "filePath": "$lobbyId/waiting.tsx",
      "parent": "/$lobbyId"
    }
  }
}
ROUTE_MANIFEST_END */
